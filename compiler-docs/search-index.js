var searchIndex = JSON.parse('{\
"fe":{"doc":"The <code>fe</code> command-line interface.","t":[13,13,13,4,17,13,13,17,13,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,5,5,5],"n":["Abi","Ast","Bytecode","CompilationTarget","DEFAULT_OUTPUT_DIR_NAME","LoweredAst","Tokens","VERSION","Yul","borrow","borrow_mut","eq","fmt","fmt","from","from_str","into","ioerr_to_string","main","to_string","try_from","try_into","type_id","variants","verify_nonexistent_or_empty","write_compiled_module","write_output"],"q":["fe","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[["compilationtarget",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],["result",4]],[[]],[[["error",3]],["string",3]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["path",3]],[["string",3],["result",4]]],[[["bool",15],["compiledmodule",3],["str",15]],[["string",3],["result",4]]],[[["path",3],["str",15]],[["string",3],["result",4]]]],"p":[[4,"CompilationTarget"]]},\
"fe_abi":{"doc":"Fe to ABI builder.","t":[4,6,13,6,6,13,11,11,5,0,11,11,11,11,11,11,0,3,3,13,3,3,3,13,3,3,4,3,13,8,6,13,13,13,13,4,13,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["AbiError","ContractName","DuplicateContractDefinition","JsonAbi","NamedAbis","SerializationFailed","borrow","borrow_mut","build","elements","fmt","from","into","try_from","try_into","type_id","utils","AbiComponent","Component","Constructor","Contract","Event","EventField","Fallback","FuncInput","FuncOutput","FuncType","Function","Function","JsonAbi","ModuleAbis","Nonpayable","Payable","Pure","Receive","StateMutability","View","abi_json_name","anonymous","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","components","components","components","components","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","events","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","functions","indexed","inputs","into","into","into","into","into","into","into","into","into","into","json","name","name","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","new","outputs","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","typ","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","event_topic","func_selector"],"q":["fe_abi","","","","","","","","","","","","","","","","","fe_abi::elementsfe_abi::utils",""],"d":["","The name of a Fe contract.","","The ABI of a contract as a string.","A mapping of contract names and their ABIs.","","","","Builds ABIs for each contract in the module.","Elements used to define contract ABIs.","","","","","","","","Single component of a tuple.","Component of an ABI tuple.","","All public interfaces of a Fe contract.","An event interface.","A single event field.","","A single function input.","A single function output.","The type of a public function.","A function interface.","","Information relevant to ABI encoding.","The ABIs for each contract in a Fe module.","","","","","The mutability of a public function.","","Name of the type as it appears in the Json ABI.","True if the event was declared as anonymous.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The subcomponents of the component.","Components of a tuple. This field is excluded if there …","Components of a tuple. This field is excluded if there …","Components of a tuple. This field is excluded if there …","","","","","","","","","","","","","All events defined in a contract.","All event fields.","","","","","","","","","","","","","","","","","","","","","","All public functions defined in a contract.","True if the field is part of the log’s topics, false if …","All function inputs.","","","","","","","","","","","Serialize the contract into a valid JSON ABI.","","The event’s name.","The event field’s name.","The function’s name.","","The input’s name.","The output’s name.","","","","","","","","","","All function outputs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of an event (Always “event”).","The type of an event (e.g. u256, address, bytes100,…)","The type of a function (Function, Constructor, Receive, …","","The input’s type.","The output’s type.","","","","","","","","","","","Formats the name and fields and calculates the 32 byte …","Formats the name and params and calculates the 4 byte …"],"i":[0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,3,3,3,2,0,3,4,5,6,7,5,8,9,10,11,12,2,3,6,7,5,8,9,10,11,12,2,3,6,7,5,8,9,10,11,12,2,3,6,7,5,8,9,10,11,12,2,3,7,7,8,11,12,6,6,7,5,8,9,10,11,12,2,3,7,6,5,6,7,5,8,9,10,11,12,2,3,6,7,5,8,9,10,10,11,12,2,3,6,8,9,6,7,5,8,9,10,11,12,2,3,6,7,5,8,9,10,11,12,6,7,5,8,9,10,11,12,6,9,7,6,5,8,9,10,11,12,2,3,6,7,5,8,9,10,11,12,2,3,6,7,5,8,9,10,11,12,2,3,6,7,5,8,9,10,11,12,2,3,7,5,8,9,10,11,12,6,7,5,8,9,10,11,12,2,3,0,0],"f":[null,null,null,null,null,null,[[]],[[]],[[["analyzerdb",8],["moduleid",3]],[["result",4],["abierror",4],["namedabis",6]]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["string",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["contract",3]],[[],["abicomponent",3]],[[],["event",3]],[[],["eventfield",3]],[[],["function",3]],[[],["component",3]],[[],["funcinput",3]],[[],["funcoutput",3]],[[],["functype",4]],[[],["statemutability",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["abicomponent",3]],["ordering",4]],null,null,null,null,[[]],[[["contract",3]],["bool",15]],[[["abicomponent",3]],["bool",15]],[[["event",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[["function",3]],["bool",15]],[[["component",3]],["bool",15]],[[["funcinput",3]],["bool",15]],[[["funcoutput",3]],["bool",15]],[[["functype",4]],["bool",15]],[[["statemutability",4]],["bool",15]],[[],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["abicomponent",3]]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]],[["result",4],["string",3],["abierror",4]]],null,null,null,null,null,null,null,[[["contract",3]],["bool",15]],[[["abicomponent",3]],["bool",15]],[[["event",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[["function",3]],["bool",15]],[[["component",3]],["bool",15]],[[["funcinput",3]],["bool",15]],[[["funcoutput",3]],["bool",15]],[[]],null,[[["abicomponent",3]],[["option",4],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],["string",3]],[[["str",15]],["string",3]]],"p":[[4,"AbiError"],[4,"FuncType"],[4,"StateMutability"],[8,"JsonAbi"],[3,"Event"],[3,"Contract"],[3,"AbiComponent"],[3,"EventField"],[3,"Function"],[3,"Component"],[3,"FuncInput"],[3,"FuncOutput"]]},\
"fe_analyzer":{"doc":"Fe semantic analysis.","t":[8,3,5,11,11,0,0,0,10,10,10,10,10,10,10,10,10,10,10,11,0,10,11,11,11,10,10,14,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,0,11,11,11,10,10,10,10,11,11,10,11,13,13,13,4,13,4,13,13,4,13,13,13,13,4,13,13,13,4,13,4,13,4,13,13,13,13,13,13,4,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,8,13,4,3,3,3,3,4,13,13,13,13,3,13,13,13,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,3,3,4,3,3,4,13,3,13,13,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,0,0,13,3,13,3,3,3,8,3,3,3,3,3,3,3,13,3,3,3,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,3,13,3,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,13,3,13,13,4,13,13,13,3,13,13,3,3,3,4,3,3,13,13,13,13,13,13,4,3,13,13,13,13,8,4,13,13,3,13,13,3,13,13,4,8,13,13,13,17,13,13,13,13,11,10,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,10,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,12],"n":["AnalyzerDb","Db","analyze","borrow","borrow_mut","builtins","constants","context","contract_all_events","contract_all_fields","contract_all_functions","contract_event_map","contract_field_map","contract_field_type","contract_function_map","contract_init_function","contract_public_function_map","contract_pure_function_map","contract_self_function_map","default","errors","event_type","fmt_index","for_each_query","from","function_body","function_signature","impl_intern_key","intern_contract","intern_contract_field","intern_event","intern_function","intern_module","intern_struct","intern_struct_field","intern_type_alias","into","lookup_intern_contract","lookup_intern_contract_field","lookup_intern_event","lookup_intern_function","lookup_intern_module","lookup_intern_struct","lookup_intern_struct_field","lookup_intern_type_alias","maybe_changed_since","module_all_type_defs","module_contracts","module_resolve_type","module_structs","module_type_def_map","namespace","ops_database","ops_salsa_runtime","ops_salsa_runtime_mut","struct_all_fields","struct_field_map","struct_field_type","struct_type","try_from","try_into","type_alias_type","type_id","AbiEncode","Address","Block","BlockField","Chain","ChainField","Clone","Coinbase","ContractTypeMethod","Create","Create2","Difficulty","GasPrice","GlobalMethod","Id","Keccak256","Msg","MsgField","Number","Object","Origin","SelfField","Self_","Sender","Sig","Timestamp","ToMem","Tx","TxField","Value","ValueMethod","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","hash","into","into","into","into","into","into","into","into","into","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","MAX_INDEXED_EVENT_FIELDS","Analysis","AnalyzerContext","BuiltinFunction","CallType","DiagnosticVoucher","ExpressionAttributes","FunctionBody","Label","Location","Memory","Pure","SelfAttribute","Storage","TempContext","TypeAttribute","TypeConstructor","Value","ValueAttribute","add_diagnostic","add_diagnostic","assign_location","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calls","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","diagnostics","diagnostics","duplicate_name_error","emits","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","expressions","fancy_error","final_location","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into_cloned","into_cs_label","into_loaded","location","message","move_location","ne","ne","ne","ne","ne","ne","ne","new","not_yet_implemented","primary","register_diag","resolve_type","resolve_type","secondary","sink_diagnostics","span","spans","style","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_error","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","var_decl_types","func","func_name","func_name","func_name","self_span","typ","typ","nonce","0","0","AlreadyDefined","AnalyzerError","BinaryOperationError","CannotMove","FatalError","IndexingError","NotEqualAndUnsigned","NotFixedSize","NotSubscriptable","RightIsSigned","RightTooLarge","TypeError","TypesNotEqual","TypesNotNumeric","WrongIndexType","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","duplicate_name_error","eq","eq","eq","equivalent","error","fancy_error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","ne","new","new","not_yet_implemented","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_error","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","items","scopes","types","Alias","Contract","Contract","ContractField","ContractFieldId","ContractId","DiagnosticSink","Event","EventId","Function","FunctionId","Module","ModuleId","Struct","Struct","StructField","StructFieldId","StructId","TypeAlias","TypeAliasId","TypeDefId","all_contracts","all_events","all_fields","all_fields","all_functions","all_structs","all_type_defs","as_intern_id","as_intern_id","as_intern_id","as_intern_id","as_intern_id","as_intern_id","as_intern_id","as_intern_id","ast","ast","ast","ast","ast","ast","ast","ast","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contract","data","data","data","data","data","data","data","data","default","diagnostics","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","event","events","field","field_type","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_intern_id","from_intern_id","from_intern_id","from_intern_id","from_intern_id","from_intern_id","from_intern_id","from_intern_id","function","functions","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","init_function","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_public","is_pure","module","module","module","module","module","module","module","name","name","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","parent","parent","parent","parent","public_function","public_functions","pure_function","pure_functions","push","push_all","resolve_type","self_function","self_functions","signature","sink_diagnostics","sink_diagnostics","sink_diagnostics","sink_diagnostics","sink_diagnostics","sink_diagnostics","sink_diagnostics","sink_diagnostics","sink_diagnostics","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","typ","typ","typ","type_defs","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BlockScope","BlockScopeType","Function","FunctionScope","IfElse","ItemScope","Loop","add_call","add_declaration","add_diagnostic","add_diagnostic","add_diagnostic","add_emit","add_expression","add_var","body","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","contract_field","contract_function","contract_name","db","db","diagnostics","diagnostics","eq","fmt","from","from","from","from","function","function_return_type","inherits_type","into","into","into","into","new","new","new","new_child","parent","pure_contract_function","resolve_event","resolve_type","resolve_type","resolve_type","root","self_contract_function","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","update_expression","var_def_span","var_def_span","var_type","var_type","variable_defs","Address","Array","Array","Array","Base","Base","Base","Bool","Contract","Contract","Contract","Event","EventField","FeString","FixedSize","FunctionParam","FunctionSignature","I128","I16","I256","I32","I64","I8","Integer","Map","Map","Mutable","None","Numeric","SafeNames","SelfDecl","String","String","Struct","Struct","Struct","Tuple","Tuple","Tuple","Type","TypeDowncast","U128","U16","U256","U256","U32","U64","U8","Unit","address","as_array","as_array","as_int","as_int","as_map","as_map","as_string","as_string","as_tuple","as_tuple","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_hold","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expect_return_type","field_count","fields","fits","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generic_arg_type","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i256_max","i256_min","id","id","inner","int","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_fixed_size","is_indexed","is_signed","is_signed_integer","is_unit","is_unit","items","key","lower_snake","lower_snake","lower_snake","lower_snake","lower_snake","lower_snake","lower_snake","lower_snake","max_size","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","param_types","params","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","return_type","self_decl","size","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u256","u256_max","u256_min","u8","unit","unit","value"],"q":["fe_analyzer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::builtins","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::constants","fe_analyzer::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::context::CallType","","","","","","","fe_analyzer::context::Location","fe_analyzer::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::namespace","","","fe_analyzer::namespace::itemsfe_analyzer::namespace::scopes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::namespace::typesd":["","","Performs semantic analysis of the source program","","","","","","","","","","","","","","","","","","Semantic errorshe type of a function call.","This should only be created by [<code>AnalyzerContext</code>].","Contains contextual information relating to an expression …","","","Indicates where an expression is stored.","","","","A storage value may not have a nonce known at compile …","","","","","","","","The expected location of a value with the given type when …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The final location of an expression after a possible move.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds a move to memory.","Convert into a [<code>codespan_reporting::Diagnostic::Label</code>]","Adds a move to value, if it is in storage or memory.","","","","","","","","","","","","","Create a primary label with the given message. This will …","","","","Create a secondary label with the given message. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error to be returned from APIs that should reject …","","Errors that can result from a binary operation","Error indicating that a value can not move between memory …","Error to be returned when otherwise no meaningful …","Errors that can result from indexing","","Error indicating that a [<code>Type</code>] can’t be converted into …","","","","Error indicating that a type is invalid.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>FatalError</code> instance, given a “voucher” …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All contracts, including duplicates","A <code>Vec</code> of all events defined within the contract, …","All field ids, including those with duplicate names","All fields, including duplicates","A <code>Vec</code> of every function defined in the contract, …","All structs, including duplicates","Includes type defs with duplicate names","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lookup an event by name.","A map of events defined within the contract.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lookup a function by name. Searches all user functions, …","User functions, public and not. Excludes <code>__init__</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lookup a function by name. Matches on public and private …","Excludes <code>__init__</code>.","Get a pure function by its name.","Functions that do not have a self parameter.","","","","Get a function that takes self by its name.","Functions that have a self parameter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maps defined type name to its [<code>TypeDefId</code>]. Type defs …","","","","","","","","","","","","","","","","","","","","","","","","","Attribute contextual information to a call expression …","Attribute contextual information to a declaration node.","","","","Attribute contextual information to an emit statement …","Attribute contextual information to an expression node.","Add a variable to the block scope.","","","","","","","","","","","","","","","","","","","","","","","","","","","Return true if the scope or any of its parents is of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the expression attributes.","","","","Lookup a definition in current or inherited block scope","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Names that can be used to build identifiers without …","","","","","","","","","","","","","","","","","","","","Creates an instance of address.","","","","","","","","","","","Creates an instance of bool.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the integer is at least the same size (or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","","","Returns <code>true</code> if <code>num</code> represents a number that fits the type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the integer is signed, otherwise <code>false</code>","","","Returns true if the type is <code>()</code>.","","","Name in the lower snake format (e.g. lower_snake_case).","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an instance of u256.","","","Creates an instance of u8.","","Creates an instance of <code>()</code>.",""],"i":[0,0,0,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,1,0,2,1,1,1,2,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,0,1,1,1,2,2,2,2,1,1,2,1,3,4,5,0,5,0,3,6,0,7,7,6,8,0,9,10,5,0,6,0,8,0,5,11,11,6,3,5,0,11,0,3,10,7,5,6,9,11,8,4,3,10,7,5,6,9,11,8,4,10,10,3,10,7,5,6,9,11,8,4,10,3,10,7,5,6,9,11,8,4,3,10,7,5,6,9,11,8,4,3,10,7,5,6,9,11,8,4,10,3,10,7,5,6,9,11,8,4,10,7,5,3,10,7,5,6,9,11,8,4,3,10,7,5,6,9,11,8,4,3,10,7,5,6,9,11,8,4,0,0,0,12,0,0,0,0,0,0,13,12,12,13,0,12,12,13,12,14,15,13,16,17,15,13,18,19,12,20,16,17,15,13,18,19,12,20,18,16,17,13,18,19,12,20,16,17,13,18,19,12,20,15,18,16,15,14,18,16,17,13,18,19,12,20,16,17,13,18,19,12,20,14,18,14,19,16,17,13,18,19,19,12,20,16,17,15,13,18,19,12,20,16,17,13,20,16,17,15,13,18,19,12,20,19,20,19,19,20,19,16,17,13,18,19,12,20,19,14,20,14,14,15,20,16,20,18,20,16,17,13,18,19,12,20,19,16,17,15,13,18,19,12,20,16,17,15,13,18,19,12,20,19,14,16,17,15,13,18,19,12,20,16,18,21,22,23,24,22,25,24,26,27,28,0,0,0,0,0,0,29,0,30,29,29,0,29,29,30,31,32,27,33,34,30,29,28,31,32,27,33,34,30,29,28,31,31,0,31,30,29,31,0,0,31,32,27,33,34,30,29,28,31,32,32,27,33,34,30,29,28,31,31,32,27,33,34,30,29,28,31,31,32,0,31,31,32,27,33,34,30,29,28,31,32,27,33,34,30,29,28,0,31,32,27,33,34,30,29,28,0,0,0,35,0,35,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,36,37,37,38,37,36,36,36,39,37,40,41,38,42,43,44,45,46,47,48,49,50,51,41,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,51,36,39,37,40,41,38,42,43,38,36,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,37,37,38,37,37,38,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,36,39,37,40,41,38,42,43,37,37,44,36,45,39,46,37,47,40,48,41,49,38,50,42,51,43,37,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,41,41,37,41,38,43,45,46,49,35,37,40,41,38,42,46,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,41,47,48,50,37,37,37,37,52,52,36,37,37,41,36,35,39,37,40,41,38,42,43,35,39,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,35,39,40,38,42,43,36,44,36,35,45,39,46,37,47,40,48,41,49,38,50,42,51,43,0,0,53,0,53,0,53,54,54,55,54,56,54,54,56,54,55,54,56,53,55,54,56,53,53,53,54,54,56,56,54,55,54,53,53,55,54,56,53,54,54,56,55,54,56,53,55,54,56,56,56,54,54,55,54,56,56,54,53,55,54,56,53,55,54,56,53,56,55,54,56,53,54,54,56,54,56,56,57,0,58,59,0,58,59,57,0,58,59,0,0,0,0,0,0,60,60,60,60,60,60,0,0,58,61,61,57,0,0,58,59,0,58,59,0,58,59,0,0,60,60,60,0,60,60,60,57,59,62,58,62,58,62,58,62,58,62,58,59,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,60,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,57,60,63,68,61,58,59,59,57,60,63,64,65,66,67,68,69,61,70,71,72,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,69,66,71,60,58,58,59,59,57,57,60,60,63,63,64,64,65,65,66,66,67,67,68,68,69,61,70,71,72,58,58,58,59,59,59,59,57,60,63,64,65,66,67,68,69,61,70,71,72,58,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,0,0,66,67,63,58,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,58,72,60,58,58,59,65,64,73,59,57,63,65,66,67,68,68,66,67,70,71,72,58,59,57,63,64,65,66,67,68,69,70,71,72,69,69,57,60,63,68,61,69,69,60,63,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,58,59,57,60,63,64,65,66,67,68,58,59,59,57,60,63,64,65,66,67,68,69,61,70,71,72,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,70,72,58,59,57,60,63,64,65,66,67,68,69,61,70,71,72,59,0,0,59,58,59,64],"f":[null,null,[[["analyzerdb",8],["module",3]],[["result",4],["moduleid",3],["vec",3]]],[[]],[[]],null,null,null,[[["contractid",3]],[["vec",3],["rc",3]]],[[["contractid",3]],[["vec",3],["rc",3]]],[[["contractid",3]],[["rc",3],["vec",3]]],[[["contractid",3]],[["analysis",3],["rc",3]]],[[["contractid",3]],[["rc",3],["analysis",3]]],[[["contractfieldid",3]],[["result",4],["analysis",3]]],[[["contractid",3]],[["analysis",3],["rc",3]]],[[["contractid",3]],[["option",4],["analysis",3]]],[[["contractid",3]],[["indexmap",3],["rc",3]]],[[["contractid",3]],[["indexmap",3],["rc",3]]],[[["contractid",3]],[["indexmap",3],["rc",3]]],[[],["db",3]],null,[[["eventid",3]],[["rc",3],["analysis",3]]],[[["formatter",3],["databasekeyindex",3]],["result",6]],[[["fnmut",8]]],[[]],[[["functionid",3]],[["analysis",3],["rc",3]]],[[["functionid",3]],[["rc",3],["analysis",3]]],null,[[["contract",3],["rc",3]],["contractid",3]],[[["contractfield",3],["rc",3]],["contractfieldid",3]],[[["rc",3],["event",3]],["eventid",3]],[[["rc",3],["function",3]],["functionid",3]],[[["rc",3],["module",3]],["moduleid",3]],[[["rc",3],["struct",3]],["structid",3]],[[["rc",3],["structfield",3]],["structfieldid",3]],[[["rc",3],["typealias",3]],["typealiasid",3]],[[]],[[["contractid",3]],[["contract",3],["rc",3]]],[[["contractfieldid",3]],[["contractfield",3],["rc",3]]],[[["eventid",3]],[["rc",3],["event",3]]],[[["functionid",3]],[["rc",3],["function",3]]],[[["moduleid",3]],[["rc",3],["module",3]]],[[["structid",3]],[["struct",3],["rc",3]]],[[["structfieldid",3]],[["rc",3],["structfield",3]]],[[["typealiasid",3]],[["rc",3],["typealias",3]]],[[["revision",3],["databasekeyindex",3]],["bool",15]],[[["moduleid",3]],[["rc",3],["vec",3]]],[[["moduleid",3]],[["vec",3],["rc",3]]],[[["moduleid",3],["string",3]],[["option",4],["result",4]]],[[["moduleid",3]],[["vec",3],["rc",3]]],[[["moduleid",3]],[["rc",3],["analysis",3]]],null,[[],["database",8]],[[],["runtime",3]],[[],["runtime",3]],[[["structid",3]],[["rc",3],["vec",3]]],[[["structid",3]],[["rc",3],["analysis",3]]],[[["structfieldid",3]],[["analysis",3],["result",4]]],[[["structid",3]],[["rc",3],["struct",3]]],[[],["result",4]],[[],["result",4]],[[["typealiasid",3]],[["result",4],["analysis",3]]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["globalmethod",4]],[[]],[[["valuemethod",4]],["bool",15]],[[["globalmethod",4]],["bool",15]],[[["contracttypemethod",4]],["bool",15]],[[["object",4]],["bool",15]],[[["blockfield",4]],["bool",15]],[[["chainfield",4]],["bool",15]],[[["msgfield",4]],["bool",15]],[[["txfield",4]],["bool",15]],[[["selffield",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4],["valuemethod",4]]],[[["str",15]],[["globalmethod",4],["result",4]]],[[["str",15]],[["contracttypemethod",4],["result",4]]],[[["str",15]],[["object",4],["result",4]]],[[["str",15]],[["result",4],["blockfield",4]]],[[["str",15]],[["chainfield",4],["result",4]]],[[["str",15]],[["msgfield",4],["result",4]]],[[["str",15]],[["result",4],["txfield",4]]],[[["str",15]],[["result",4],["selffield",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["diagnostic",3]]],[[["diagnostic",3]]],[[["fixedsize",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["analysis",3]],[[],["diagnosticvoucher",3]],[[],["location",4]],[[],["functionbody",3]],[[],["expressionattributes",3]],[[],["calltype",4]],[[],["label",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tempcontext",3]],[[],["functionbody",3]],null,null,[[["str",15],["span",3]],["diagnosticvoucher",3]],null,[[["analysis",3]],["bool",15]],[[["diagnosticvoucher",3]],["bool",15]],[[["location",4]],["bool",15]],[[["functionbody",3]],["bool",15]],[[["expressionattributes",3]],["bool",15]],[[["calltype",4]],["bool",15]],[[["label",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15],["span",3]],["diagnosticvoucher",3]],null,[[["vec",3],["str",15],["label",3],["string",3],["vec",3]],["diagnosticvoucher",3]],[[],["location",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sourcefileid",3]],[["sourcefileid",3],["label",3]]],[[],[["cannotmove",3],["result",4]]],null,null,null,[[["analysis",3]],["bool",15]],[[["diagnosticvoucher",3]],["bool",15]],[[["location",4]],["bool",15]],[[["functionbody",3]],["bool",15]],[[["expressionattributes",3]],["bool",15]],[[["calltype",4]],["bool",15]],[[["label",3]],["bool",15]],[[["location",4],["type",4]]],[[["str",15],["span",3]],["diagnosticvoucher",3]],[[["span",3]],["label",3]],[[["diagnostic",3]],["diagnosticvoucher",3]],[[["str",15]],[["result",4],["option",4]]],[[["str",15]],[["result",4],["option",4]]],[[["span",3]],["label",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["str",15],["display",8],["span",3]],["diagnosticvoucher",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["typeerror",3]],[[]],[[["str",15],["span",3]],["diagnostic",3]],[[["typeerror",3]],["bool",15]],[[["indexingerror",4]],["bool",15]],[[["binaryoperationerror",4]],["bool",15]],[[],["bool",15]],[[["span",3]],["diagnostic",3]],[[["vec",3],["string",3],["label",3],["vec",3]],["diagnostic",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["typeerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typeerror",3]],["bool",15]],[[["diagnosticvoucher",3]]],[[["diagnosticvoucher",3]]],[[["span",3]],["diagnostic",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["span",3]],["diagnostic",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["analyzerdb",8]],[["vec",3],["rc",3]]],[[["analyzerdb",8]],[["vec",3],["rc",3]]],[[["analyzerdb",8]],[["vec",3],["rc",3]]],[[["analyzerdb",8]],[["rc",3],["vec",3]]],[[["analyzerdb",8]],[["rc",3],["vec",3]]],[[["analyzerdb",8]],[["vec",3],["rc",3]]],[[["analyzerdb",8]],[["rc",3],["vec",3]]],[[],["internid",3]],[[],["internid",3]],[[],["internid",3]],[[],["internid",3]],[[],["internid",3]],[[],["internid",3]],[[],["internid",3]],[[],["internid",3]],null,null,null,null,null,null,null,null,[[["analyzerdb",8]],[["rc",3],["functionbody",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["module",3]],[[],["moduleid",3]],[[],["typedefid",4]],[[],["typealias",3]],[[],["typealiasid",3]],[[],["contract",3]],[[],["contractid",3]],[[],["contractfield",3]],[[],["contractfieldid",3]],[[],["function",3]],[[],["functionid",3]],[[],["struct",3]],[[],["structid",3]],[[],["structfield",3]],[[],["structfieldid",3]],[[],["event",3]],[[],["eventid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["analyzerdb",8]],[["module",3],["rc",3]]],[[["analyzerdb",8]],[["typealias",3],["rc",3]]],[[["analyzerdb",8]],[["rc",3],["contract",3]]],[[["analyzerdb",8]],[["contractfield",3],["rc",3]]],[[["analyzerdb",8]],[["function",3],["rc",3]]],[[["analyzerdb",8]],[["struct",3],["rc",3]]],[[["analyzerdb",8]],[["rc",3],["structfield",3]]],[[["analyzerdb",8]],[["rc",3],["event",3]]],[[],["structid",3]],[[["analyzerdb",8]],[["vec",3],["diagnostic",3]]],[[["module",3]],["bool",15]],[[["moduleid",3]],["bool",15]],[[["typedefid",4]],["bool",15]],[[["typealias",3]],["bool",15]],[[["typealiasid",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["contractid",3]],["bool",15]],[[["contractfield",3]],["bool",15]],[[["contractfieldid",3]],["bool",15]],[[["function",3]],["bool",15]],[[["functionid",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["structid",3]],["bool",15]],[[["structfield",3]],["bool",15]],[[["structfieldid",3]],["bool",15]],[[["event",3]],["bool",15]],[[["eventid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["analyzerdb",8],["str",15]],[["eventid",3],["option",4]]],[[["analyzerdb",8]],[["rc",3],["indexmap",3]]],[[["analyzerdb",8],["str",15]],[["structfieldid",3],["option",4]]],[[["analyzerdb",8],["str",15]],["option",4]],[[["analyzerdb",8]],[["indexmap",3],["rc",3]]],[[["analyzerdb",8]],[["rc",3],["indexmap",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["internid",3]]],[[["internid",3]]],[[["internid",3]]],[[["internid",3]]],[[["internid",3]]],[[["internid",3]]],[[["internid",3]]],[[["internid",3]]],[[["analyzerdb",8],["str",15]],[["option",4],["functionid",3]]],[[["analyzerdb",8]],[["indexmap",3],["rc",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["analyzerdb",8]],[["option",4],["functionid",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["analyzerdb",8]],["bool",15]],[[["analyzerdb",8]],["bool",15]],[[["analyzerdb",8]],["moduleid",3]],[[["analyzerdb",8]],["moduleid",3]],[[["analyzerdb",8]],["moduleid",3]],[[["analyzerdb",8]],["moduleid",3]],null,null,null,[[["analyzerdb",8]],["string",3]],[[["analyzerdb",8]],["string",3]],[[["analyzerdb",8]],["string",3]],[[["analyzerdb",8]],["string",3]],[[["analyzerdb",8]],["string",3]],[[["analyzerdb",8]],["string",3]],null,[[["module",3]],["bool",15]],[[["moduleid",3]],["bool",15]],[[["typedefid",4]],["bool",15]],[[["typealias",3]],["bool",15]],[[["typealiasid",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["contractid",3]],["bool",15]],[[["contractfield",3]],["bool",15]],[[["contractfieldid",3]],["bool",15]],[[["function",3]],["bool",15]],[[["functionid",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["structid",3]],["bool",15]],[[["structfield",3]],["bool",15]],[[["structfieldid",3]],["bool",15]],[[["event",3]],["bool",15]],[[["eventid",3]],["bool",15]],[[["analyzerdb",8]],["contractid",3]],null,null,null,[[["analyzerdb",8],["str",15]],[["option",4],["functionid",3]]],[[["analyzerdb",8]],[["indexmap",3],["rc",3]]],[[["analyzerdb",8],["str",15]],[["option",4],["functionid",3]]],[[["analyzerdb",8]],[["indexmap",3],["rc",3]]],[[["diagnostic",3]]],[[]],[[["analyzerdb",8],["str",15]],[["option",4],["result",4]]],[[["analyzerdb",8],["str",15]],[["option",4],["functionid",3]]],[[["analyzerdb",8]],[["indexmap",3],["rc",3]]],[[["analyzerdb",8]],[["rc",3],["functionsignature",3]]],[[["analyzerdb",8]]],[[["analyzerdb",8]]],[[["analyzerdb",8]]],[[["analyzerdb",8]]],[[["analyzerdb",8]]],[[["analyzerdb",8]]],[[["analyzerdb",8]]],[[["analyzerdb",8]]],[[["analyzerdb",8]]],[[["analyzerdb",8]],["span",3]],[[["analyzerdb",8]],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["analyzerdb",8]],[["result",4],["typeerror",3],["type",4]]],[[["analyzerdb",8]],[["result",4],["typeerror",3],["type",4]]],[[["analyzerdb",8]],[["result",4],["typeerror",3],["type",4]]],[[["analyzerdb",8]],[["rc",3],["struct",3]]],[[["analyzerdb",8]],[["result",4],["fixedsize",4],["typeerror",3]]],[[["analyzerdb",8]],[["event",3],["rc",3]]],[[["analyzerdb",8]],[["indexmap",3],["rc",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["node",3],["calltype",4]]],[[["node",3],["fixedsize",4]]],[[["diagnostic",3]]],[[["diagnostic",3]]],[[["diagnostic",3]]],[[["node",3],["eventid",3]]],[[["expressionattributes",3],["node",3]]],[[["span",3],["str",15],["fixedsize",4]],[["result",4],["alreadydefined",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockscopetype",4]],[[]],[[["str",15]],["option",4]],[[["str",15]],[["option",4],["functionid",3]]],[[],["string",3]],[[],["analyzerdb",8]],null,null,null,[[["blockscopetype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[],[["result",4],["typeerror",3],["fixedsize",4]]],[[["blockscopetype",4]],["bool",15]],[[]],[[]],[[]],[[]],[[["moduleid",3],["analyzerdb",8]]],[[["functionid",3],["analyzerdb",8]]],[[["functionscope",3],["blockscopetype",4]]],[[["blockscopetype",4]]],null,[[["str",15]],[["option",4],["functionid",3]]],[[["str",15]],[["eventid",3],["option",4]]],[[["str",15]],[["result",4],["option",4]]],[[["str",15]],[["result",4],["option",4]]],[[["str",15]],[["result",4],["option",4]]],null,[[["str",15]],[["option",4],["functionid",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["expressionattributes",3],["node",3]]],[[["str",15]],[["span",3],["option",4]]],[[["str",15]],[["span",3],["option",4]]],[[["str",15]],[["option",4],["result",4]]],[[["str",15]],[["option",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],[["array",3],["option",4]]],[[],[["array",3],["option",4]]],[[],[["integer",4],["option",4]]],[[],[["integer",4],["option",4]]],[[],[["option",4],["map",3]]],[[],[["option",4],["map",3]]],[[],[["festring",3],["option",4]]],[[],[["festring",3],["option",4]]],[[],[["option",4],["tuple",3]]],[[],[["option",4],["tuple",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["integer",4]],["bool",15]],[[],["type",4]],[[],["fixedsize",4]],[[],["base",4]],[[],["integer",4]],[[],["array",3]],[[],["map",3]],[[],["tuple",3]],[[],["struct",3]],[[],["contract",3]],[[],["festring",3]],[[],["functionsignature",3]],[[],["selfdecl",4]],[[],["functionparam",3]],[[],["event",3]],[[],["eventfield",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["base",4]],["ordering",4]],[[["integer",4]],["ordering",4]],[[["array",3]],["ordering",4]],[[["festring",3]],["ordering",4]],[[["selfdecl",4]],["ordering",4]],[[["type",4]],["bool",15]],[[["type",4]],["bool",15]],[[["fixedsize",4]],["bool",15]],[[["base",4]],["bool",15]],[[["integer",4]],["bool",15]],[[["array",3]],["bool",15]],[[["map",3]],["bool",15]],[[["tuple",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["festring",3]],["bool",15]],[[["functionsignature",3]],["bool",15]],[[["selfdecl",4]],["bool",15]],[[["functionparam",3]],["bool",15]],[[["event",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fixedsize",4]],null,null,[[["bigint",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["fixedsize",4]]],[[["base",4]]],[[["tuple",3]]],[[]],[[["base",4]]],[[["festring",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["option",4],["type",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bigint",3]],[[],["bigint",3]],null,null,null,[[["integer",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,null,null,null,null,null,[[["type",4]],["bool",15]],[[["fixedsize",4]],["bool",15]],[[["base",4]],["bool",15]],[[["array",3]],["bool",15]],[[["map",3]],["bool",15]],[[["tuple",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["festring",3]],["bool",15]],[[["functionsignature",3]],["bool",15]],[[["functionparam",3]],["bool",15]],[[["event",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[],[["vec",3],["fixedsize",4]]],null,[[["base",4]],[["option",4],["ordering",4]]],[[["integer",4]],[["option",4],["ordering",4]]],[[["array",3]],[["option",4],["ordering",4]]],[[["festring",3]],[["option",4],["ordering",4]]],[[["selfdecl",4]],[["option",4],["ordering",4]]],null,null,[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["type",4]],[["result",4],["notfixedsize",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[]],[[]],[[]],null],"p":[[3,"Db"],[8,"AnalyzerDb"],[4,"ValueMethod"],[4,"SelfField"],[4,"Object"],[4,"BlockField"],[4,"ContractTypeMethod"],[4,"TxField"],[4,"ChainField"],[4,"GlobalMethod"],[4,"MsgField"],[4,"CallType"],[4,"Location"],[8,"AnalyzerContext"],[3,"TempContext"],[3,"Analysis"],[3,"DiagnosticVoucher"],[3,"FunctionBody"],[3,"ExpressionAttributes"],[3,"Label"],[13,"BuiltinFunction"],[13,"SelfAttribute"],[13,"Pure"],[13,"TypeAttribute"],[13,"TypeConstructor"],[13,"Storage"],[3,"AlreadyDefined"],[3,"AnalyzerError"],[4,"BinaryOperationError"],[4,"IndexingError"],[3,"TypeError"],[3,"FatalError"],[3,"CannotMove"],[3,"NotFixedSize"],[4,"TypeDefId"],[3,"ModuleId"],[3,"ContractId"],[3,"StructId"],[3,"TypeAliasId"],[3,"ContractFieldId"],[3,"FunctionId"],[3,"StructFieldId"],[3,"EventId"],[3,"Module"],[3,"TypeAlias"],[3,"Contract"],[3,"ContractField"],[3,"Function"],[3,"Struct"],[3,"StructField"],[3,"Event"],[8,"DiagnosticSink"],[4,"BlockScopeType"],[3,"FunctionScope"],[3,"ItemScope"],[3,"BlockScope"],[4,"Base"],[4,"Type"],[4,"FixedSize"],[4,"Integer"],[4,"SelfDecl"],[8,"TypeDowncast"],[3,"Array"],[3,"Map"],[3,"Tuple"],[3,"Struct"],[3,"Contract"],[3,"FeString"],[3,"FunctionSignature"],[3,"FunctionParam"],[3,"Event"],[3,"EventField"],[8,"SafeNames"]]},\
"fe_common":{"doc":"","t":[3,8,11,11,11,11,11,14,14,11,11,11,11,11,0,12,11,0,11,11,11,11,11,11,11,0,0,11,10,12,11,11,11,11,0,11,13,3,13,13,3,4,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,5,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,13,3,4,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,8,5,10,10,5,5,5,5,3,11,11,11,11,11,11,5,11,11,11,11],"n":["Span","Spanned","add","add","add","add","add_assign","assert_snapshot_wasm","assert_strings_eq","borrow","borrow_mut","clone","clone_into","deserialize","diagnostics","end","eq","files","fmt","from","from_pair","hash","into","ne","new","numeric","panic","serialize","span","start","to_owned","try_from","try_into","type_id","utils","zero","Bug","Diagnostic","Error","Help","Label","LabelStyle","Note","Primary","Secondary","Severity","Warning","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cs","diagnostics_string","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","into","into","into","into","into_cs","into_cs_label","labels","message","message","ne","ne","notes","partial_cmp","primary","print_diagnostics","secondary","severity","span","style","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Bug","Diagnostic","Error","Help","Label","LabelStyle","Note","Primary","Secondary","Severity","Warning","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bug","clone","clone","clone","clone_into","clone_into","clone_into","code","eq","eq","eq","error","file_id","fmt","fmt","fmt","from","from","from","from","help","into","into","into","labels","message","message","ne","ne","new","new","note","notes","partial_cmp","primary","range","secondary","severity","style","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","warning","with_code","with_labels","with_message","with_message","with_notes","0","FileLoader","FileStore","OsFileLoader","SourceFile","SourceFileId","add_file","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","eq","fmt","from","from","from","from","get_file","hash","into","into","into","into","line_index","line_index","line_range","line_span","load_file","load_file","load_file","name","ne","new","new","source","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_loader","Binary","Decimal","Hexadecimal","Literal","Octal","Radix","as_num","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","parse","radix","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","install_panic_hook","humanize","keccak","ron","Pluralizable","pluralize_conditionally","to_plural","to_singular","full","full_as_bytes","partial","partial_right_padded","Diff","borrow","borrow_mut","fmt","from","into","new","to_ron_string_pretty","to_string","try_from","try_into","type_id"],"q":["fe_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_common::diagnostics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_common::diagnostics::cs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_common::files","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_common::numeric","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_common::panic","fe_common::utils","","","fe_common::utils::humanize","","","","fe_common::utils::keccak","","","","fe_common::utils::ron","","","","","","","","","","",""],"d":["An exclusive span of byte offsets in a source file.","","","","","","","","Compare the given strings and panic when not equal with a …","","","","","","","A byte offset specifying the exclusive end of a span.","","","","","","","","","","","","","","A byte offset specifying the inclusive start of a span.","","","","","","","An unexpected bug.","","An error.","A help message.","","","A note.","","","A severity level for diagnostic messages.","A warning.","","","","","","","","","","","","","","","","","Diagnostic data structures.","Format the given diagnostics as a string.","","","","","","","","","","","","","","","","","","","","","","Convert into a [<code>codespan_reporting::Diagnostic::Label</code>]","","","","","","","","Create a primary label with the given message. This will …","Print the given diagnostics to stderr.","Create a secondary label with the given message. This …","","","","","","","","","","","","","","","","","","","","An unexpected bug.","Represents a diagnostic message that can provide …","An error.","A help message.","A label describing an underlined region of code …","","A note.","Labels that describe the primary cause of a diagnostic.","Labels that provide additional context for a diagnostic.","A severity level for diagnostic messages.","A warning.","","","","","","","Create a new diagnostic with a severity of <code>Severity::Bug</code>.","","","","","","","An optional code that identifies this diagnostic.","","","","Create a new diagnostic with a severity of <code>Severity::Error</code>…","The file that we are labelling.","","","","","","","","Create a new diagnostic with a severity of <code>Severity::Help</code>.","","","","Source labels that describe the cause of the diagnostic. …","An optional message to provide some additional …","The main message associated with this diagnostic.","","","Create a new label.","Create a new diagnostic.","Create a new diagnostic with a severity of <code>Severity::Note</code>.","Notes that are associated with the primary cause of the …","","Create a new label with a style of <code>LabelStyle::Primary</code>.","The range in bytes we are going to include in the final …","Create a new label with a style of <code>LabelStyle::Secondary</code>.","The overall severity of the diagnostic","The style of the label.","","","","","","","","","","","","","Create a new diagnostic with a severity of …","Set the error code of the diagnostic.","Add some labels to the diagnostic.","Add a message to the diagnostic.","Set the message of the diagnostic.","Add some notes to the diagnostic.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A helper type to interpret a numeric literal represented …","","A type that represents the radix of a numeric literal.","Returns number representation of the radix.","","","","","","","","","","","","","","","","","Parse the numeric literal to <code>T</code>.","Returns radix of the numeric literal.","","","","","","","","","","","","","A trait to derive plural or singular representations from","","","","Get the full 32 byte hash of the content.","Get the full 32 byte hash of the content as a byte array.","Take the first <code>size</code> number of bytes of the hash with no …","Take the first <code>size</code> number of bytes of the hash and pad …","Wrapper struct for formatting changesets from the …","","","","","","","Convenience function to serialize objects in RON format …","","","",""],"i":[0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,2,1,1,1,1,1,0,1,3,0,3,3,0,0,3,4,4,0,3,5,4,6,3,5,4,6,3,5,4,6,3,5,4,6,3,0,0,5,4,6,3,5,4,6,3,5,4,6,3,5,4,6,3,5,4,6,3,5,6,5,5,6,5,6,5,3,6,0,6,5,6,6,5,4,6,3,5,4,6,3,5,4,6,3,5,4,6,3,3,0,3,3,0,0,3,7,7,0,3,7,8,9,7,8,9,9,7,8,9,7,8,9,9,7,8,9,9,8,7,8,9,7,7,8,9,9,7,8,9,9,8,9,8,9,8,9,9,9,7,8,8,8,9,8,7,8,9,7,8,9,7,8,9,7,8,9,9,9,9,8,9,9,10,0,0,0,0,0,11,12,13,11,10,12,13,11,10,10,10,11,10,10,12,13,11,10,11,10,12,13,11,10,12,11,11,12,14,13,11,11,10,12,11,11,10,12,13,11,10,12,13,11,10,12,13,11,10,11,15,15,15,0,15,0,15,15,16,15,16,15,16,15,16,15,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,0,0,0,0,0,0,17,17,0,0,0,0,0,18,18,18,18,18,18,0,18,18,18,18],"f":[null,null,[[]],[[["option",4],["span",3]]],[[["option",4]]],[[]],[[]],null,null,[[]],[[]],[[],["span",3]],[[]],[[],["result",4]],null,null,[[["span",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["span",3]],["bool",15]],[[["usize",15]]],null,null,[[],["result",4]],[[],["span",3]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["diagnostic",3]],[[],["labelstyle",4]],[[],["label",3]],[[],["severity",4]],[[]],[[]],[[]],[[]],null,[[["filestore",3],["sourcefileid",3]],["string",3]],[[["diagnostic",3]],["bool",15]],[[["labelstyle",4]],["bool",15]],[[["label",3]],["bool",15]],[[["severity",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sourcefileid",3]],[["diagnostic",3],["sourcefileid",3]]],[[["sourcefileid",3]],[["sourcefileid",3],["label",3]]],null,null,null,[[["diagnostic",3]],["bool",15]],[[["label",3]],["bool",15]],null,[[["severity",4]],[["option",4],["ordering",4]]],[[["into",8],["string",3],["span",3]]],[[["filestore",3],["sourcefileid",3]]],[[["into",8],["string",3],["span",3]]],null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["diagnostic",3]],[[],["labelstyle",4]],[[],["label",3]],[[],["diagnostic",3]],[[]],[[]],[[]],null,[[["labelstyle",4]],["bool",15]],[[["label",3]],["bool",15]],[[["diagnostic",3]],["bool",15]],[[],["diagnostic",3]],null,[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["labelstyle",4]],["labelstyle",4]],[[]],[[]],[[]],[[],["diagnostic",3]],[[]],[[]],[[]],null,null,null,[[["label",3]],["bool",15]],[[["diagnostic",3]],["bool",15]],[[["labelstyle",4]],["label",3]],[[["severity",4]],["diagnostic",3]],[[],["diagnostic",3]],null,[[["labelstyle",4]],[["option",4],["ordering",4]]],[[],["label",3]],null,[[],["label",3]],null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["diagnostic",3]],[[],["diagnostic",3]],[[["label",3],["vec",3],["global",3]],["diagnostic",3]],[[],["label",3]],[[],["diagnostic",3]],[[["string",3],["global",3],["vec",3]],["diagnostic",3]],null,null,null,null,null,null,[[["str",15]],["sourcefileid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sourcefileid",3]],[[]],[[]],[[["sourcefileid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["sourcefileid",3]],[["option",4],["sourcefile",3]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15],["sourcefileid",3]],[["result",4],["usize",15],["cserror",4]]],[[["usize",15],["sourcefileid",3]],[["result",4],["range",3],["cserror",4]]],[[["usize",15]],[["option",4],["span",3]]],[[["path",3]],[["result",6],["string",3]]],[[["path",3]],[["result",6],["string",3]]],[[["str",15]],["result",6]],[[["sourcefileid",3]],[["result",4],["cserror",4]]],[[["sourcefileid",3]],["bool",15]],[[["str",15]]],[[]],[[["sourcefileid",3]],[["result",4],["cserror",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["fileloader",8],["box",3]]],null,null,null,null,null,null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["radix",4]],[[],["literal",3]],[[]],[[]],[[["radix",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]]],[[],[["num",8],["result",4]]],[[],["radix",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,[[["usize",15]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[["usize",15]],["string",3]],[[["usize",15]],["string",3]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]]],[[],[["result",6],["string",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Span"],[8,"Spanned"],[4,"Severity"],[4,"LabelStyle"],[3,"Diagnostic"],[3,"Label"],[4,"LabelStyle"],[3,"Label"],[3,"Diagnostic"],[3,"SourceFileId"],[3,"FileStore"],[3,"SourceFile"],[3,"OsFileLoader"],[8,"FileLoader"],[4,"Radix"],[3,"Literal"],[8,"Pluralizable"],[3,"Diff"]]},\
"fe_compiler_test_utils":{"doc":"","t":[6,3,17,3,6,3,3,3,6,8,12,5,12,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,12,12,5,5,11,11,11,11,11,5,11,11,11,12,5,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,5,5,5,5,12,11,5,5,11,11],"n":["Backend","ContractHarness","DEFAULT_CALLER","ExecutionOutput","Executor","NumericAbiTokenBounds","Runtime","SolidityCompileError","StackState","ToBeBytes","abi","address","address","address_array_token","address_token","bool_token","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_calldata","bytes_token","call_function","caller","capture_call","capture_call_raw_bytes","default","encode_error_reason","encode_revert","encoded_div_or_mod_by_zero","encoded_invalid_abi_data","encoded_over_or_underflow","encoded_panic_assert","events_emitted","expect_revert","expect_revert_reason","expect_success","fmt","fmt","from","from","from","from","from","get_2s_complement_for_negative","get_all","i_max","i_min","int_array_token","int_token","into","into","into","into","into","load_contract","new","new","set_caller","size","string_token","test_call_reverts","test_function","test_function_reverts","to_2s_complement","to_be_bytes","to_string","to_yul","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tuple_token","type_id","type_id","type_id","type_id","type_id","u_max","u_min","uint_array_token","uint_token","uint_token_from_dec_str","validate_revert","value","with_data","with_executor","with_executor_backend","with_functions","with_test_statements"],"q":["fe_compiler_test_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panic if the execution did not revert.","Panic if the output is not an encoded error reason of the …","Panic if the execution did not succeed.","","","","","","","","To get the 2s complement value for e.g. -128 call …","","","","","","","","","","","","Create a new <code>Runtime</code> instance.","Create an <code>ExecutionOutput</code> instance","","","","","","","","","","Generate the top level YUL object","","","","","","","","","","","","","","","","","","","","","","","","","","","Add the given set of functions","Add the given set of test statements"],"i":[0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,2,3,4,5,1,2,3,4,5,1,0,1,1,1,1,2,0,0,0,0,0,0,1,3,3,3,5,5,1,2,3,4,5,0,4,4,4,0,0,1,2,3,4,5,0,2,3,1,4,0,1,1,1,0,6,5,2,1,2,3,4,5,1,2,3,4,5,0,1,2,3,4,5,4,4,0,0,0,0,1,2,0,0,2,2],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["h160",3]],null,[[],["token",4]],[[["str",15]],["token",4]],[[["bool",15]],["token",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["vec",3],["u8",15]]],[[["str",15]],["token",4]],[[["executor",6],["str",15]],[["option",4],["token",4]]],null,[[["executor",6],["str",15]],[["capture",4],["infallible",4]]],[[["u8",15],["executor",6],["vec",3]],[["capture",4],["infallible",4]]],[[]],[[["str",15]],[["vec",3],["u8",15]]],[[["str",15]],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[["executor",6]]],[[],["executionoutput",3]],[[["str",15]],["executionoutput",3]],[[],["executionoutput",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u256",3]],["u256",3]],[[]],null,null,[[],["token",4]],[[["i64",15]],["token",4]],[[]],[[]],[[]],[[]],[[]],[[["h160",3],["str",15]],["contractharness",3]],[[],["runtime",3]],[[["exitreason",4],["vec",3],["u8",15]],["executionoutput",3]],[[["h160",3]]],null,[[["str",15]],["token",4]],[[["vec",3],["u8",15],["executor",6]]],[[["token",4],["str",15],["option",4],["executor",6]]],[[["str",15],["executor",6]]],[[["i64",15]],["u256",3]],[[]],[[],["string",3]],[[],["object",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["token",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["token",4]],[[["u64",15]],["token",4]],[[["str",15]],["token",4]],[[["infallible",4],["capture",4]]],null,[[["vec",3],["data",3]],["runtime",3]],[[["fn",8]]],[[["backend",6],["fn",8]]],[[["vec",3],["statement",4]],["runtime",3]],[[["vec",3],["statement",4]],["runtime",3]]],"p":[[3,"ContractHarness"],[3,"Runtime"],[3,"ExecutionOutput"],[3,"NumericAbiTokenBounds"],[3,"SolidityCompileError"],[8,"ToBeBytes"]]},\
"fe_compiler_tests":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"fe_driver":{"doc":"","t":[12,3,3,3,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12],"n":["0","CompileError","CompiledContract","CompiledModule","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compile","contracts","fmt","from","from","from","into","into","into","json_abi","lowered_ast","src_ast","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","yul"],"q":["fe_driver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","The artifacts of a compiled contract.","The artifacts of a compiled module.","","","","","","","Compiles the given Fe source code to all targets.","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,2,3,1,2,3,1,0,2,1,2,3,1,2,3,1,3,2,2,2,3,1,2,3,1,2,3,1,3],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15],["str",15]],[["result",4],["compiledmodule",3],["compileerror",3]]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[3,"CompileError"],[3,"CompiledModule"],[3,"CompiledContract"]]},\
"fe_lowering":{"doc":"Fe Lowering.","t":[5],"n":["lower"],"q":["fe_lowering"],"d":["Lowers the Fe source AST to a Fe HIR AST."],"i":[0],"f":[[[["analyzerdb",8],["moduleid",3]],["module",3]]],"p":[]},\
"fe_parser":{"doc":"","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,6,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,11,11,0,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,11,0,12,11,11,11,0,5,5,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,4,13,13,3,13,4,13,3,13,4,13,13,13,3,13,3,4,13,3,13,13,3,4,4,4,3,13,4,13,4,13,13,13,4,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,3,13,13,13,3,13,13,13,13,3,13,13,3,13,13,13,13,13,13,13,3,13,4,13,13,13,4,13,13,13,4,13,13,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Amper","AmperEq","And","Arrow","As","Assert","Binary","BraceClose","BraceOpen","BracketClose","BracketOpen","Break","Colon","ColonColon","Comma","Const","Continue","Contract","Dedent","Dot","Elif","Else","Emit","Eq","EqEq","Error","Event","False","Fn","For","Gt","GtEq","GtGt","GtGtEq","Hat","HatEq","Hex","Idx","If","Import","In","Indent","Int","Label","Let","Lt","LtEq","LtLt","LtLtEq","Minus","MinusEq","Name","Newline","Not","NotEq","Octal","Or","ParenClose","ParenOpen","ParseFailed","ParseResult","Parser","Pass","Percent","PercentEq","Pipe","PipeEq","Plus","PlusEq","Pragma","Pub","Return","Revert","Semi","Slash","SlashEq","Star","StarEq","StarStar","StarStarEq","Struct","Text","Tilde","Token","TokenKind","True","Type","While","as_bt_parser","assert","ast","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","diagnostics","done","enter_block","eq","error","expect","expect_newline","expect_with_notes","fancy_error","fmt","fmt","fmt","from","from","from","grammar","hash","into","into","into","into_cs_label","kind","last_indent","lexer","message","ne","new","next","node","parse_code_chunk","parse_file","peek","peek_or_err","peeked_text","primary","secondary","span","span","split_next","style","text","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unexpected_token_error","Absolute","Add","And","Array","Assert","Assign","Attribute","AugAssign","Base","BinOperation","BinOperator","BitAnd","BitOr","BitXor","Bool","BoolOperation","BoolOperator","Break","Call","CallArg","CompOperation","CompOperator","Continue","Contract","Contract","ContractStmt","Div","Emit","Eq","Event","Event","EventField","Expr","Expr","Field","For","From","FromImportName","FromImportNames","FromImportPath","FuncStmt","Function","Function","FunctionArg","Generic","GenericArg","Gt","GtE","If","Import","Import","Int","Invert","LShift","List","List","Lt","LtE","Mod","Module","ModuleStmt","Mult","Name","Name","Not","NotEq","Num","Or","Pass","Pow","Pragma","Pragma","RShift","Regular","RegularFunctionArg","Relative","Return","Revert","Simple","SimpleImportName","Star","Str","Struct","Struct","Sub","Subscript","Ternary","Tuple","Tuple","Tuple","TypeAlias","TypeAlias","TypeDesc","TypeDesc","USub","UnaryOperation","UnaryOperator","Unit","Unit","VarDecl","VarDeclTarget","While","Zelf","alias","alias","args","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_const","is_idx","is_pub","is_pub","label","name","name","name","name","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","path","return_type","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","version_requirement","args","attr","else_expr","elts","elts","func","generic_args","if_expr","index","left","left","left","op","op","op","op","operand","right","right","right","test","value","value","parent_level","path","path","args","body","body","body","error","iter","msg","name","op","or_else","target","target","target","target","test","test","test","typ","value","value","value","value","value","names","names","path","args","base","base","dimension","items","typ","contracts","expressions","functions","module","types","parse_contract_def","parse_call_args","parse_expr","parse_expr_with_min_bp","parse_assert_stmt","parse_emit_statement","parse_fn_def","parse_for_stmt","parse_if_stmt","parse_return_stmt","parse_revert_stmt","parse_single_word_stmt","parse_stmt","parse_while_stmt","parse_from_import","parse_module","parse_module_stmt","parse_pragma","parse_simple_import","parse_event_def","parse_event_field","parse_field","parse_generic_args","parse_opt_qualifier","parse_struct_def","parse_type_alias","parse_type_desc","Amper","AmperEq","And","Arrow","As","Assert","Binary","BraceClose","BraceOpen","BracketClose","BracketOpen","Break","Colon","ColonColon","Comma","Const","Continue","Contract","Dedent","Dot","Elif","Else","Emit","Eq","EqEq","Error","Event","False","Fn","For","Gt","GtEq","GtGt","GtGtEq","Hat","HatEq","Hex","Idx","If","Import","In","Indent","Int","Let","Lexer","Lt","LtEq","LtLt","LtLtEq","Minus","MinusEq","Name","Newline","Not","NotEq","Octal","Or","ParenClose","ParenOpen","Pass","Percent","PercentEq","Pipe","PipeEq","Plus","PlusEq","Pragma","Pub","Return","Revert","Semi","Slash","SlashEq","Star","StarEq","StarStar","StarStarEq","Struct","Text","Tilde","Token","TokenKind","True","Type","While","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","friendly_str","from","from","from","into","into","into","into_iter","kind","lex","ne","new","next","source","span","symbol_str","text","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Node","NodeId","Span","Spanned","add","add","add","add","add","add_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","create","default","deserialize","deserialize","end","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_pair","hash","hash","hash","id","into","into","into","kind","name","name","name","name","name","name","name","ne","ne","ne","new","new","new_id","partial_cmp","serialize","serialize","span","span","span","start","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":["fe_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_parser::astfe_parser::ast::Expr","","","","","","","","","","","","","","","","","","","","","","","fe_parser::ast::FromImportPath","","","fe_parser::ast::FuncStmt","","","","","","","","","","","","","","","","","","","","","","","fe_parser::ast::Import","","","fe_parser::ast::TypeDesc","","","","","","fe_parser::grammar","","","","","fe_parser::grammar::contracts","fe_parser::grammar::expressions","","","fe_parser::grammar::functions","","","","","","","","","","fe_parser::grammar::module","","","","","fe_parser::grammar::types","","","","","","","","fe_parser::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_parser::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Virtual tokens emitted by the parser","","","","","","","","","","","","","","","","","","","","<code>Parser</code> maintains the parsing state, such as the token …","","","","","","","","","","","","","","","","","","","","","","","","","","","Return as wrapped back tracking parser","Assert that the next token kind it matches the expected …","","","","","","","","","","The diagnostics (errors and warnings) emitted during …","Returns <code>true</code> if the parser has reached the end of the …","Enter an indented block, which is expected to be …","","Emit an error diagnostic, but don’t stop parsing","If the next token matches the expected kind, return it. …","Expect and consume one or more newlines, without …","Like [<code>Parser::expect</code>], but with additional notes to be …","Emit a “fancy” error diagnostic with any number of …","","","","","","","","","","","","Convert into a [<code>codespan_reporting::Diagnostic::Label</code>]","","The leading whitespace string of the last-seen indented …","","","","Create a new parser for a source code string and …","Return the next token, or an error if we’ve reached the …","","Apply the given parsing function to the code string, …","Parse a [<code>Module</code>] from the file content string.","Take a peek at the next token kind. Returns <code>None</code> if we’…","Take a peek at the next token kind without consuming it, …","Peek at the text of the next token, without consuming it. …","Create a primary label with the given message. This will …","Create a secondary label with the given message. This …","","","Split the next token into two tokens, returning the …","","","","","","","","","","","","","","Emit an “unexpected token” error diagnostic with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","struct or contract field, with optional ‘pub’ and ‘…arse a contract definition.","Parse call arguments","Parse an expression, starting with the next token.","Parse an expression, stopping if/when we reach an …","Parse an <code>assert</code> statement.","Parse an <code>emit</code> statement","Parse a function definition. The optional <code>pub</code> qualifier …","Parse a <code>for</code> statement.","Parse an <code>if</code> statement, or an <code>elif</code> block.","Parse a <code>return</code> statement.","Parse a <code>revert</code> statement.","Parse a <code>continue</code>, <code>break</code>, <code>pass</code>, or <code>revert</code> statement.","Parse a function-level statement.","Parse a <code>while</code> statement.","Parse a <code>from x import y</code> style import statement.","Parse a [<code>Module</code>].","Parse a [<code>ModuleStmt</code>].","Parse a <code>pragma <version-requirement></code> statement.","Parse an <code>import</code> statement. This does not yet support …","Parse an event definition.","Parse an event field, e.g. <code>foo: u8</code> or <code>idx from: address</code>.","Parse a field for a struct or contract. The leading …","Parse an angle-bracket-wrapped list of generic arguments …","Parse an optional qualifier (<code>pub</code>, <code>const</code>, or <code>idx</code>).","Parse a [<code>ModuleStmt::Struct</code>].","Parse a type alias definition, e.g. …","Parse a type description, e.g. <code>u8</code> or <code>Map<address, u256></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Virtual tokens emitted by the parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a user-friendly description of the token kind. E.g.…","","","","","","","","","","","Create a new lexer with the given source code string.","","Return the full source code string that’s being …","","If the token is a symbol or keyword, return the string …","","","","","","","","","","","","","","","","An exclusive span of byte offsets in a source file.","","","","","","","","","","","","","","","","","","","","","","","","","A byte offset specifying the exclusive end of a span.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets a new node ID.","","","","","","","A byte offset specifying the inclusive start of a span.","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,2,2,0,2,3,4,2,3,4,4,4,2,2,2,4,2,2,2,2,2,3,3,4,2,3,4,0,4,2,3,4,4,5,2,0,4,4,2,2,0,0,0,2,2,2,4,4,5,4,2,4,5,4,3,2,3,4,2,3,4,2,3,4,2,6,7,8,9,10,10,11,10,9,11,0,7,7,7,11,11,0,10,11,0,11,0,10,0,12,0,7,10,13,0,14,0,0,10,0,10,15,0,0,0,0,0,14,0,9,0,13,13,10,0,12,16,17,7,18,11,13,13,7,0,0,7,19,11,17,13,11,8,10,7,0,12,7,20,0,6,10,10,15,0,18,11,0,12,7,11,11,9,19,11,0,12,0,16,17,11,0,9,11,10,0,10,20,21,22,23,24,25,23,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,25,28,30,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,8,7,7,17,17,13,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,29,31,29,23,33,27,25,28,22,29,30,23,31,32,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,21,23,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,12,16,14,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,27,29,31,32,24,12,26,15,27,25,28,9,16,21,6,18,22,29,14,30,23,31,32,20,10,19,11,33,8,7,17,13,29,33,26,34,35,36,37,38,34,34,36,39,40,41,42,40,41,43,42,43,40,41,42,36,35,39,44,45,44,46,47,48,49,50,47,51,46,52,49,53,54,52,47,48,49,51,53,55,53,54,52,56,57,58,58,59,60,59,61,62,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,5,1,63,5,1,63,5,1,63,5,1,63,5,1,5,1,1,5,1,63,5,1,63,63,5,1,5,63,63,63,5,1,5,5,1,63,5,1,63,5,1,63,5,1,63,0,0,0,0,64,64,64,64,64,64,65,66,64,65,66,64,65,66,64,65,66,64,65,65,65,66,64,64,65,66,64,65,66,64,65,65,65,66,66,64,64,64,64,65,66,64,66,65,66,64,66,66,66,66,66,66,66,66,65,66,64,66,64,66,65,66,64,67,66,66,64,65,66,64,65,66,64,65,66,64,65,66,64,64],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["btparser",3]],[[["tokenkind",4]],["token",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["label",3]],[[]],null,[[],["bool",15]],[[["span",3],["str",15]],["parseresult",6]],[[["label",3]],["bool",15]],[[["span",3],["string",3],["into",8]]],[[["tokenkind",4],["string",3],["into",8]],[["parseresult",6],["token",3]]],[[["str",15]],["parseresult",6]],[[["tokenkind",4]],[["parseresult",6],["token",3]]],[[["string",3],["vec",3],["label",3],["into",8],["vec",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["sourcefileid",3]],[["label",3],["sourcefileid",3]]],null,[[],["str",15]],null,null,[[["label",3]],["bool",15]],[[["str",15]]],[[],[["parseresult",6],["token",3]]],null,[[["str",15]],["parseresult",6]],[[["str",15]],[["result",4],["vec",3]]],[[],[["tokenkind",4],["option",4]]],[[],[["tokenkind",4],["parseresult",6]]],[[],["str",15]],[[["span",3]],["label",3]],[[["span",3]],["label",3]],null,null,[[],[["parseresult",6],["token",3]]],null,null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["span",3],["string",3],["vec",3],["into",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["module",3]],[[],["modulestmt",4]],[[],["pragma",3]],[[],["import",4]],[[],["typealias",3]],[[],["contract",3]],[[],["struct",3]],[[],["typedesc",4]],[[],["genericarg",4]],[[],["simpleimportname",3]],[[],["fromimportpath",4]],[[],["fromimportnames",4]],[[],["fromimportname",3]],[[],["field",3]],[[],["contractstmt",4]],[[],["event",3]],[[],["function",3]],[[],["eventfield",3]],[[],["regularfunctionarg",3]],[[],["functionarg",4]],[[],["funcstmt",4]],[[],["vardecltarget",4]],[[],["expr",4]],[[],["callarg",3]],[[],["booloperator",4]],[[],["binoperator",4]],[[],["unaryoperator",4]],[[],["compoperator",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["module",3]],["bool",15]],[[["modulestmt",4]],["bool",15]],[[["pragma",3]],["bool",15]],[[["import",4]],["bool",15]],[[["typealias",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["typedesc",4]],["bool",15]],[[["genericarg",4]],["bool",15]],[[["simpleimportname",3]],["bool",15]],[[["fromimportpath",4]],["bool",15]],[[["fromimportnames",4]],["bool",15]],[[["fromimportname",3]],["bool",15]],[[["field",3]],["bool",15]],[[["contractstmt",4]],["bool",15]],[[["event",3]],["bool",15]],[[["function",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[["regularfunctionarg",3]],["bool",15]],[[["functionarg",4]],["bool",15]],[[["funcstmt",4]],["bool",15]],[[["vardecltarget",4]],["bool",15]],[[["expr",4]],["bool",15]],[[["callarg",3]],["bool",15]],[[["booloperator",4]],["bool",15]],[[["binoperator",4]],["bool",15]],[[["unaryoperator",4]],["bool",15]],[[["compoperator",4]],["bool",15]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["module",3]],["bool",15]],[[["modulestmt",4]],["bool",15]],[[["pragma",3]],["bool",15]],[[["import",4]],["bool",15]],[[["typealias",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["typedesc",4]],["bool",15]],[[["genericarg",4]],["bool",15]],[[["simpleimportname",3]],["bool",15]],[[["fromimportpath",4]],["bool",15]],[[["fromimportnames",4]],["bool",15]],[[["fromimportname",3]],["bool",15]],[[["field",3]],["bool",15]],[[["contractstmt",4]],["bool",15]],[[["event",3]],["bool",15]],[[["function",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[["regularfunctionarg",3]],["bool",15]],[[["functionarg",4]],["bool",15]],[[["funcstmt",4]],["bool",15]],[[["vardecltarget",4]],["bool",15]],[[["expr",4]],["bool",15]],[[["callarg",3]],["bool",15]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["parser",3]],[["node",3],["parseresult",6]]],[[["parser",3]],[["node",3],["parseresult",6]]],[[["parser",3]],[["node",3],["parseresult",6]]],[[["parser",3],["u8",15]],[["node",3],["parseresult",6]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["span",3],["parser",3],["option",4]],[["node",3],["parseresult",6]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["node",3],["parseresult",6]]],[[["parser",3]],[["parseresult",6],["modulestmt",4]]],[[["parser",3]],[["node",3],["parseresult",6]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["node",3],["parseresult",6]]],[[["span",3],["option",4],["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["node",3],["parseresult",6]]],[[["tokenkind",4],["parser",3]],[["span",3],["option",4]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["token",3]],[[],["tokenkind",4]],[[],["lexer",3]],[[]],[[]],[[]],[[["token",3]],["bool",15]],[[["tokenkind",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["str",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["lexer",3]]],[[["token",3]],["bool",15]],[[["str",15]],["lexer",3]],[[],["option",4]],[[],["str",15]],null,[[],[["str",15],["option",4]]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["span",3]],["span",3]],[[["token",3]]],[[["option",4]],["span",3]],[[["span",3],["option",4]],["span",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nodeid",3]],[[],["node",3]],[[],["span",3]],[[]],[[]],[[]],[[["nodeid",3]],["ordering",4]],[[]],[[],["nodeid",3]],[[],["result",4]],[[],[["result",4],["span",3]]],null,[[["nodeid",3]],["bool",15]],[[["node",3]],["bool",15]],[[["span",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["node",3]]],[[]],[[["box",3]]],[[["token",3]],[["node",3],["string",3]]],[[]],[[["box",3]]],[[["node",3]]],[[]],[[],["span",3]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["nodeid",3]],["bool",15]],[[["node",3]],["bool",15]],[[["span",3]],["bool",15]],[[["span",3]]],[[["usize",15]],["span",3]],[[]],[[["nodeid",3]],[["option",4],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[],["span",3]],[[],["span",3]],null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["span",3]]],"p":[[4,"TokenKind"],[3,"Parser"],[3,"ParseFailed"],[3,"Label"],[3,"Token"],[4,"FromImportPath"],[4,"BinOperator"],[4,"BoolOperator"],[4,"TypeDesc"],[4,"FuncStmt"],[4,"Expr"],[4,"ModuleStmt"],[4,"CompOperator"],[4,"ContractStmt"],[4,"Import"],[4,"GenericArg"],[4,"UnaryOperator"],[4,"FromImportNames"],[4,"VarDeclTarget"],[4,"FunctionArg"],[3,"SimpleImportName"],[3,"FromImportName"],[3,"Function"],[3,"Module"],[3,"Contract"],[3,"Pragma"],[3,"TypeAlias"],[3,"Struct"],[3,"Field"],[3,"Event"],[3,"EventField"],[3,"RegularFunctionArg"],[3,"CallArg"],[13,"Call"],[13,"Attribute"],[13,"Ternary"],[13,"List"],[13,"Tuple"],[13,"Subscript"],[13,"BoolOperation"],[13,"BinOperation"],[13,"CompOperation"],[13,"UnaryOperation"],[13,"Relative"],[13,"Absolute"],[13,"Emit"],[13,"For"],[13,"While"],[13,"If"],[13,"Revert"],[13,"Assert"],[13,"AugAssign"],[13,"VarDecl"],[13,"Assign"],[13,"Return"],[13,"Expr"],[13,"Simple"],[13,"From"],[13,"Generic"],[13,"Base"],[13,"Array"],[13,"Tuple"],[3,"Lexer"],[3,"Span"],[3,"NodeId"],[3,"Node"],[8,"Spanned"]]},\
"fe_test_files":{"doc":"","t":[5,5],"n":["fixture","fixture_bytes"],"q":["fe_test_files",""],"d":["",""],"i":[0,0],"f":[[[["str",15]],["str",15]],[[["str",15]]]],"p":[]},\
"fe_yulc":{"doc":"Fe to EVM compiler.","t":[12,6,6,6,3,11,11,5,5,11,11,11,11,11,11],"n":["0","Bytecode","ContractName","NamedBytecodeContracts","YulcError","borrow","borrow_mut","compile","compile_single_contract","fmt","from","into","try_from","try_into","type_id"],"q":["fe_yulc","","","","","","","","","","","","","",""],"d":["","The bytecode of a contract as string object.","The name of a Fe contract.","A mapping of contract names and their bytecode.","","","","Compile a map of Yul contracts to a map of bytecode …","Compiles a single Yul contract to bytecode.","","","","","",""],"i":[1,0,0,0,0,1,1,0,0,1,1,1,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[["namedyulcontracts",6],["bool",15]],[["yulcerror",3],["namedbytecodecontracts",6],["result",4]]],[[["bool",15],["str",15],["yulir",6]],[["bytecode",6],["result",4],["yulcerror",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"YulcError"]]},\
"fe_yulgen":{"doc":"Fe to Yul compiler.","t":[6,6,6,5,0,0,0,0,0,0,17,17,17,17,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,13,4,13,11,11,5,5,5,5,5,5,11,11,11,11,11,5,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,0,5,0,0,0,0,0,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,13,8,13,13,13,8,13,13,13,13,13,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,5,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["ContractName","NamedYulContracts","YulIr","compile","constants","constructor","names","operations","runtime","types","PANIC_DIV_OR_MOD_BY_ZERO","PANIC_FAILED_ASSERTION","PANIC_INVALID_ABI_DATA","PANIC_OVER_OR_UNDERFLOW","numeric_min_max","build","build_with_init","abi","adjust_numeric_size","checked_add","checked_div","checked_exp","checked_mod","checked_mul","checked_sub","contract_call","func_name","revert","struct_function_name","struct_getter_call","struct_new_call","var_name","decode_component","decode_component_address","decode_component_bool","decode_component_bytes","decode_component_int","decode_component_static_array","decode_component_string","decode_component_tuple","decode_component_uint","decode_data","encode","typ","types","vals","abi","contracts","data","math","revert","structs","Bounded","EncodingSize","Exact","borrow","borrow_mut","decode_component","decode_data","encode","encoding_head_size","encoding_known_size","encoding_size","from","into","try_from","try_into","type_id","unpack","max","min","call","create","create2","emit_event","indexed_array","keyed_map","mcopym","mcopys","mload","mstore","scopym","scopys","sload","sstore","sum","adjust_numeric_size","error_revert","panic_revert","revert","get_attribute","new","abi_dispatcher","build","build_with_abi_dispatcher","functions","dispatcher","abi","contracts","data","math","revert","std","structs","all","batch_decode","batch_encode","decode_component","decode_component_address","decode_component_bool","decode_component_bytes","decode_component_int","decode_component_static_array","decode_component_string","decode_component_tuple","decode_component_uint","decode_data","encode","is_left_padded","is_right_padded","unpack","all","calls","create","create2","all","alloc","alloc_mstoren","avail","bytes_mcopys","bytes_scopym","bytes_scopys","bytes_sloadn","bytes_sstoren","ccopym","ceil32","cloadn","free","load_data_string","map_value_ptr","mcopym","mcopys","mloadn","mstoren","scopym","scopys","set_zero","sloadn","sstoren","ternary","adjust_numeric_size_fns","all","checked_add_fns","checked_div_fns","checked_exp_fns","checked_mod_fns","checked_mul_fns","checked_sub_fns","all","error_revert","panic_revert","revert","generate_get_fn","generate_new_fn","struct_apis","AbiDecodeLocation","AbiType","Address","AsAbiType","Bool","Bytes","Calldata","EvmSized","Int","Memory","StaticArray","String","Tuple","Uint","as_abi_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","equivalent","equivalent","fmt","fmt","from","from","has_data","head_size","into","into","ne","packed_size","partial_cmp","partial_cmp","selector_name","size","to_abi_selector_names","to_abi_types","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","components","inner","max_size","size","size","size","size"],"q":["fe_yulgen","","","","","","","","","","fe_yulgen::constants","","","","","fe_yulgen::constructor","","fe_yulgen::names","","","","","","","","","","","","","","","fe_yulgen::names::abi","","","","","","","","","","","","","","fe_yulgen::operations","","","","","","fe_yulgen::operations::abi","","","","","","","","","","","","","","","","","fe_yulgen::operations::abi::EncodingSize","","fe_yulgen::operations::contracts","","","fe_yulgen::operations::data","","","","","","","","","","","","fe_yulgen::operations::math","fe_yulgen::operations::revert","","","fe_yulgen::operations::structs","","fe_yulgen::runtime","","","","fe_yulgen::runtime::abi_dispatcher","fe_yulgen::runtime::functions","","","","","","","fe_yulgen::runtime::functions::abi","","","","","","","","","","","","","","","","","fe_yulgen::runtime::functions::contracts","","","","fe_yulgen::runtime::functions::data","","","","","","","","","","","","","","","","","","","","","","","","","fe_yulgen::runtime::functions::math","","","","","","","","fe_yulgen::runtime::functions::revert","","","","fe_yulgen::runtime::functions::structs","","","fe_yulgen::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_yulgen::types::AbiType","","","","","",""],"d":["The name of a Fe contract.","A mapping of contract names and their Yul IR.","The intermediate representation of a contract as a string …","Compiles Fe source code to Yul.","","","","","","","","","","","Return a hashmap containing min/max YUL literals for each …","Builds a constructor for a contract with no init function.","Builds a constructor for a contract with an init function.","","Generate a function name to adjust the size of the integer","Generate a function name to perform checked addition","Generate a function name to perform checked division","Generate a function name to perform checked exponentiation","Generate a function name to perform checked modulo","Generate a function name to perform checked multiplication","Generate a function name to perform checked subtraction","Generates an external call function name for a given type …","Generate a safe function name for a user defined function","Generates a revert function name for a given name and …","Generates a function name for to interact with a certain …","Generates a function name for reading a named property of …","Generates a function name for creating a certain struct …","Generate a safe variable name for a user defined function","","","","","","","","","","","Generates an ABI encoding function name for a given set …","","","","","","","","","","","The size of an encoding known at compile-time.","","","","Decode a single component.","Decode a segment of memory and return each decoded …","Returns an expression that encodes the given values and …","Returns an expression that gives the size of the encoding…","Returns the known-at-compile-time encoding size.","Returns an expression that gives size of the encoded …","","","","","","Unpack each value into a newly allocated segment of …","","","Make a call to a contract of the given type and address …","Executes the <code>create</code> operation for a given contract with …","Executes the <code>create2</code> operation for a given contract with …","Logs an event.","Finds the location of an array element base on the …","Hashes the storage nonce of a map with a key to determine …","Copies a segment of memory to another segment of memory.","Copies a segment of memory into storage.","Loads a value of the given type from memory.","Stores a value of the given type in memory.","Copies a segment of storage into memory.","Copies a segment of storage to another segment of storage.","Loads a value of the given type from storage.","Stores a value of the given type in storage.","Sums a list of expressions using nested add operations.","Loads a value of the given type from storage.","Revert with an error message","Revert with a panic code","Revert with a name and a single value","","","","Builds the set of function statements that are needed …","Builds the set of function statements that are needed …","","Builds a switch statement that dispatches calls to the …","","","","","","Returns all functions that should be available during …","","Return all abi runtime functions","Creates a batch of decoding function for the given types …","Creates a batch of encoding function for the given type …","Creates a function that decodes a single component in ABI …","","","","","","","","","Creates a function that decodes ABI encoded data.","Generates an encoding function for any set of type …","Returns 0 if the value is not padded on the left with …","Returns 0 if the value is not padded on the right with …","Adds padding to array elements following the ABI standard.","Return all contacts runtime functions","Builds a set of functions used to make calls to the given …","Function that executes the <code>create</code> operation.","Function that executes the <code>create2</code> operation.","Return all data runtime functions","Allocate a given number of bytes.","Stores a value in a newly allocated memory segment.","Returns the highest available pointer.","Copy memory to a given segment of storage.","Copy storage to a newly allocated segment of memory.","Copies a segment of storage to another segment of storage.","Read a value of n bytes at the given byte address.","Stores a value in storage at the given address, only …","Copy calldata to a newly allocated segment of memory.","Rounds a 256 bit value up to the nearest multiple of 32.","Read a value of n bytes from calldata at the given …","Set the highest available pointer.","Load a static string from data into a newly allocated …","Derives the byte address of a value corresponding to a …","Copies a segment of memory to another segment of memory.","Copy memory to a given segment of storage.","Read a value of n bytes from memory at the given address.","Stores a value in memory, only modifying the given size …","Copy storage to a newly allocated segment of memory.","Copies a segment of storage to another segment of storage.","Set the given segment of the value (defined in bits) to …","Read a value of n bytes at the given word address and …","Stores a value in storage, only modifying the given size …","Evaluates the ternary expression and returns the result.","Return a vector of runtime functions to adjust numeric …","","Return a vector of runtime functions for additions with …","Return a vector of runtime functions for divisions with …","Return a vector of runtime functions for exponentiation …","Return a vector of runtime functions for checked modulo …","Return a vector of runtime functions for multiplications …","Return a vector of runtime functions for subtraction with …","Return all revert functions used by default.","Generate a YUL function to revert with the <code>Error</code> …","Generate a YUL function to revert with a panic code.","Generate a YUL function to revert with any signature name …","Generate a YUL function that can be used to read a …","Generate a YUL function that can be used to create an …","Builds a set of functions used to interact with structs …","","Solidity ABI type with extra information needed for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>true</code> if the encoded value is stored in the data section, …","The number of bytes used to encode the type’s head.","","","","The number of bytes used in Fe’s data layout. This is …","","","","The amount of bytes used by the type when being stored.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,4,0,3,4,3,3,3,3,5,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,3,4,3,3,3,4,3,6,0,0,3,4,3,4,3,4,3,4,7,8,9,8,10,11,12],"f":[null,null,null,[[["analyzerdb",8],["moduleid",3]],["namedyulcontracts",6]],null,null,null,null,null,null,null,null,null,null,[[],[["integer",4],["hashmap",3]]],[[],["code",3]],[[["str",15],["statement",4],["fixedsize",4],["analyzerdb",8],["vec",3],["vec",3]],["code",3]],null,[[["integer",4]],["identifier",3]],[[["integer",4]],["identifier",3]],[[["integer",4]],["identifier",3]],[[["integer",4]],["identifier",3]],[[["integer",4]],["identifier",3]],[[["integer",4]],["identifier",3]],[[["integer",4]],["identifier",3]],[[["str",15]],["identifier",3]],[[["str",15]],["identifier",3]],[[["abitype",4],["str",15]],["identifier",3]],[[["str",15]],["identifier",3]],[[["str",15]],["identifier",3]],[[["str",15]],["identifier",3]],[[["str",15]],["identifier",3]],[[["abitype",4],["abidecodelocation",4]],["identifier",3]],[[["abidecodelocation",4]],["identifier",3]],[[["abidecodelocation",4]],["identifier",3]],[[["abidecodelocation",4],["usize",15]],["identifier",3]],[[["abidecodelocation",4],["usize",15]],["identifier",3]],[[["abitype",4],["usize",15],["abidecodelocation",4]],["identifier",3]],[[["abidecodelocation",4],["usize",15]],["identifier",3]],[[["abidecodelocation",4]],["identifier",3]],[[["abidecodelocation",4],["usize",15]],["identifier",3]],[[["abidecodelocation",4]],["identifier",3]],[[],["identifier",3]],[[["abitype",4]],["string",3]],[[],["string",3]],[[["usize",15],["str",15]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[["abitype",4],["abidecodelocation",4],["expression",4]],["expression",4]],[[["expression",4],["abidecodelocation",4]],["expression",4]],[[["expression",4],["vec",3]],["expression",4]],[[],["expression",4]],[[],["encodingsize",4]],[[],["expression",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["expression",4]],["statement",4]],null,null,[[["contract",3],["str",15],["expression",4],["vec",3]],["expression",4]],[[["contract",3],["expression",4]],["expression",4]],[[["contract",3],["expression",4]],["expression",4]],[[["str",15],["expression",4],["vec",3]],["statement",4]],[[["array",3],["expression",4]],["expression",4]],[[["expression",4]],["expression",4]],[[["evmsized",8],["expression",4]],["expression",4]],[[["evmsized",8],["expression",4]],["statement",4]],[[["evmsized",8],["expression",4]],["expression",4]],[[["evmsized",8],["expression",4]],["statement",4]],[[["evmsized",8],["expression",4]],["expression",4]],[[["evmsized",8],["expression",4]],["statement",4]],[[["evmsized",8],["expression",4]],["expression",4]],[[["evmsized",8],["expression",4]],["statement",4]],[[["vec",3],["expression",4]],["expression",4]],[[["integer",4],["expression",4]],["expression",4]],[[["abitype",4],["expression",4]],["statement",4]],[[["usize",15]],["statement",4]],[[["abitype",4],["str",15],["expression",4]],["statement",4]],[[["expression",4],["str",15],["struct",3]],["expression",4]],[[["expression",4],["vec",3],["struct",3]],["expression",4]],null,[[["analyzerdb",8],["contractid",3],["contractcontext",3]],[["vec",3],["statement",4]]],[[["analyzerdb",8],["contractid",3],["contractcontext",3]],[["vec",3],["statement",4]]],null,[[["vec",3]],["statement",4]],null,null,null,null,null,[[],[["vec",3],["statement",4]]],null,[[],[["vec",3],["statement",4]]],[[["vec",3]],[["vec",3],["statement",4]]],[[["vec",3],["vec",3]],[["vec",3],["statement",4]]],[[["abitype",4],["abidecodelocation",4]],["statement",4]],[[["abidecodelocation",4]],["statement",4]],[[["abidecodelocation",4]],["statement",4]],[[["abidecodelocation",4],["usize",15]],["statement",4]],[[["abidecodelocation",4],["usize",15]],["statement",4]],[[["abitype",4],["usize",15],["abidecodelocation",4]],["statement",4]],[[["abidecodelocation",4],["usize",15]],["statement",4]],[[["abidecodelocation",4]],["statement",4]],[[["abidecodelocation",4],["usize",15]],["statement",4]],[[["abidecodelocation",4]],["statement",4]],[[["vec",3],["abitype",4]],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],[["vec",3],["statement",4]]],[[["analyzerdb",8],["contractid",3]],[["vec",3],["statement",4]]],[[],["statement",4]],[[],["statement",4]],[[],[["vec",3],["statement",4]]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],[["vec",3],["statement",4]]],[[],[["vec",3],["statement",4]]],[[],[["vec",3],["statement",4]]],[[],[["vec",3],["statement",4]]],[[],[["vec",3],["statement",4]]],[[],[["vec",3],["statement",4]]],[[],[["vec",3],["statement",4]]],[[],[["vec",3],["statement",4]]],[[],[["vec",3],["statement",4]]],[[["abitype",4]],["statement",4]],[[],["statement",4]],[[["abitype",4],["str",15]],["statement",4]],[[["usize",15],["str",15]],["statement",4]],[[["str",15]],["statement",4]],[[["str",15]],[["vec",3],["statement",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["analyzerdb",8]],["abitype",4]],[[]],[[]],[[]],[[]],[[],["abitype",4]],[[],["abidecodelocation",4]],[[]],[[]],[[["abitype",4]],["ordering",4]],[[["abidecodelocation",4]],["ordering",4]],[[["abitype",4]],["bool",15]],[[["abidecodelocation",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[]],[[["abitype",4]],["bool",15]],[[],["usize",15]],[[["abitype",4]],[["option",4],["ordering",4]]],[[["abidecodelocation",4]],[["option",4],["ordering",4]]],[[],["string",3]],[[],["usize",15]],[[],[["vec",3],["string",3]]],[[["analyzerdb",8]],[["vec",3],["abitype",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null],"p":[[4,"EncodingSize"],[13,"Bounded"],[4,"AbiType"],[4,"AbiDecodeLocation"],[8,"AsAbiType"],[8,"EvmSized"],[13,"Tuple"],[13,"StaticArray"],[13,"String"],[13,"Uint"],[13,"Int"],[13,"Bytes"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};